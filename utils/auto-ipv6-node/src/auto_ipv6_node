#!/bin/sh

#Enable/Disable auto_ipv6_node
[ "$(uci get auto_ipv6_node.olsr_node.enable)" == 1 ] || exit 0

. /lib/functions.sh

olsrd_clear_hna6() {
	uci delete 'olsrd.@Hna6[-1]'
	return 0
}

olsrd_find_hna6() {
	local cfg="$1"
	local netaddr="$2"
	config_get NETADDR $cfg netaddr
	if [ "$NETADDR" == "$netaddr" ] ; then
		neta="$count $neta"
	fi
	count=$((count+1))
	return 0
}

olsrd_search_hna6() {
	local cfg="$1"
	local found="0"
	config_get NETADDR $cfg netaddr
	for i in $hna6s ; do
		if [ "$NETADDR" == "$i" ] ; then
			found="1"
		fi
	done
	if [ "$found" == "0" ] ; then
		neta="$count $neta"
	fi
	count=$((count+1))
	return 0
}

net_find_iface() {
	local cfg="$1"
	case $cfg in
		loopback) return 0 ;;
		gvpn) return 0 ;;
	esac
	interfaces="$interfaces ""$cfg"
	return 0
}

local IPV6_GATEWAYS="$(wget -q -O - http://[::1]:2006/hna | grep '::/0' | cut -d "$(printf "\t")" -f 2)"
[ -z "$IPV6_GATEWAYS" ] && logger -t auto_ipv6_node "No ipv6 gateway in HNA6 table found. Either there is no IPv6 Gateway reachable or i could not connect to the txtinfo plugin. Exiting." && exit 1

# Use 1000 * 1000 here, because later we remove the decimal point in the etx from routes info
local DEFAULT_ETX="1000000"
for g in $IPV6_GATEWAYS ; do
	IPV6_GATEWAY_HNAS="$(wget -q -O - http://[::1]:2006/hna | grep $g | cut -d "$(printf "\t")" -f 1)"
	for h in $IPV6_GATEWAY_HNAS ; do
		case $h in
		::*) ;;
		fd*) ;;
		*/48)
			#we need to check all gateways in hna table and see which one is the default gw by looking at the etx for each gw
			local GW_ETX="$(wget -q -O - http://[::1]:2006/routes | grep ^${g} | awk '{ print $4 }'| sed 's/\.//')"
			#[ -z "$GW_ETX" ] && continue
			#FIXME is never false
			[ -z "$GW_ETX" ] || \
			if [ $GW_ETX -lt $DEFAULT_ETX ]; then
				DEFAULT_ETX="$GW_ETX"
				IP6_SUFFIX=$(echo $h | cut -d ':' -f 1-3)
			fi
			IP6_SUFFIX=$(echo $h | cut -d ':' -f 1-3)
			#FIXME
		;;
		esac
	done
done

[ -z "$IP6_SUFFIX" ] && logger -t auto_ipv6_node "No ipv6 gateway found. Either there is no IPv6 Gateway reachable or i could not connect to the txtinfo plugin. Exiting." && exit 1

config_load network
local interfaces=""
config_foreach net_find_iface interface

local restart_network=0
local restart_dnsmasq=0
local restart_olsrd=0
local restart_crond=0
local hna6s=""
local dnsmasq_conf="/tmp/etc/dnsmasq-ra.conf.tmp"

> $dnsmasq_conf
echo "enable-ra" >> $dnsmasq_conf
echo "dhcp-option=option6:dns-server,[::]" >> $dnsmasq_conf
echo "dhcp-option=option6:domain-search,olsr" >> $dnsmasq_conf
ula_prefix=$(uci get network.globals.ula_prefix | cut -d : -f -3)
iface_count=0

for i in $(echo $interfaces) ; do
	[ "$(uci get network.$i.proto)" == "static" ] || continue
	DEV="$(uci -q -p/var/state get network.$i.ifname)"
	[ -z "$DEV" ]  && {
		logger -t auto_ipv6_node "uci Device Not Found IP6_SUFFIX $IP6_SUFFIX interfaces $i DEV $DEV check your uci config"
		continue
	}
	grep -q "$DEV" /proc/net/dev || {
		logger -t auto_ipv6_node "proc Device Not Found IP6_SUFFIX $IP6_SUFFIX interfaces $i DEV $DEV check your uci config"
		continue
	}
	IP6_UCI=$(uci get network.$i.ip6addr)
	IP6_OLDSUFFIX="$(echo $IP6_UCI | cut -d ':' -f -3)"
	if [ "$IP6_SUFFIX" == "$IP6_OLDSUFFIX" ] ; then
		logger -t auto_ipv6_node "Found IP6_SUFFIX $IP6_OLDSUFFIX on interfaces $i DEV $DEV no update"
		continue
	fi
	logger -t auto_ipv6_node "New IP6_SUFFIX $IP6_SUFFIX for interface $i DEV $DEV"
	restart_network=1
	restart_olsrd=1
	restart_dnsmasq=1

	#Uniq 4Byte from urandom
	IP6_UNIQ="$(head -n 1 /dev/urandom 2>/dev/null | md5sum | cut -b 1-4)"
	case $IP6_UNIQ in 
		000*) IP6_UNIQ=$(echo $IP6_UNIQ | cut -b 4) ;; 
		00*) IP6_UNIQ=$(echo $IP6_UNIQ | cut -b 3-4) ;; 
		0*) IP6_UNIQ=$(echo $IP6_UNIQ | cut -b 2-4) ;;
	esac
	IP6_ADDRESS="${IP6_SUFFIX}:${IP6_UNIQ}::1/64"
	logger -t auto_ipv6_node "New IP6_ADDRESS $IP6_ADDRESS for interface $i DEV $DEV"
	uci set network.$i.ip6addr="$IP6_ADDRESS"
	uci commit network

	hna6s="$IP6_SUFFIX"":""$IP6_UNIQ""::"" $hna6s"

	echo "dhcp-range=$IP6_SUFFIX:$IP6_UNIQ::100,$IP6_SUFFIX:$IP6_UNIQ::200,64,240s" >> $dnsmasq_conf
	echo "dhcp-range=$IP6_SUFFIX:$IP6_UNIQ::,ra-only,64,240s" >> $dnsmasq_conf
	
	if [ $iface_count -eq 0 ] ; then
		echo "dhcp-range=$ula_prefix::100,$ula_prefix::200,64,240s" >> $dnsmasq_conf
		echo "dhcp-range=$ula_prefix::,ra-only,64,240s" >> $dnsmasq_conf
		iface_count=1
	else
		echo "dhcp-range=$ula_prefix:$iface_count::100,$ula_prefix:$iface_count::200,64,240s" >> $dnsmasq_conf
		echo "dhcp-range=$ula_prefix:$iface_count::,ra-only,64,240s" >> $dnsmasq_conf
		iface_count=$((iface_count+1))
	fi
done

if [ "6and4" == "$(uci get olsrd.@olsrd[0].IpVersion)" ] ; then
	if [ $restart_olsrd -eq 1 ] ; then
		config_load olsrd
		for i in $hna6s ; do
			local neta=""
			local count=0
			config_foreach olsrd_find_hna6 Hna6 $i
			if [ "$neta" == "" ] ; then
				uci add olsrd Hna6
				uci set "olsrd.@Hna6[-1].prefix=64"
				uci set "olsrd.@Hna6[-1].netaddr=""$i"
				uci commit olsrd
			fi
		done
	
		local neta=""
		local count=0
		config_foreach olsrd_search_hna6 Hna6
		for i in $neta ; do
			uci delete "olsrd.@Hna6["$i"]"
			uci commit olsrd
			restart_olsrd=1
		done
	
		local neta=""
		local count=0
		config_foreach olsrd_find_hna6 Hna6 "$ula_prefix::"
		if [ "$neta" == "" ] ; then
			uci add olsrd Hna6
			uci set "olsrd.@Hna6[-1].prefix=48"
			uci set "olsrd.@Hna6[-1].netaddr=$ula_prefix::"
			uci commit olsrd
		fi
	fi
else
	restart_olsrd=0
fi

# clear all config variables here. else they will leak into the olsrd init script
config_clear


if [ $restart_network -eq 1 ] ; then
	logger -t auto_ipv6_node "Reload network..."
	/etc/init.d/network reload
fi

if [ $restart_dnsmasq -eq 1 ] ; then
	[ -h /etc/dnsmasq.conf ] || ( rm -rf /etc/dnsmasq.conf ; ln -s $dnsmasq_conf /etc/dnsmasq.conf )
	mv $dnsmasq_conf /tmp/etc/dnsmasq-ra.conf
	if ! [ -z "$(pidof dnsmasq)" ] ; then
		logger -t auto_ipv6_node "Restarting dnsmasq..."
		/etc/init.d/dnsmasq restart
	fi
else
	rm -rf $dnsmasq_conf
fi

if [ $restart_crond -eq 1 ] ; then
	if ! [ -z "$(pidof crond)" ] ; then
		/etc/init.d/cron stop
		killall -9 crond
		/etc/init.d/cron start
	fi
fi
if [ $restart_olsrd -eq 1 ] ; then
	if ! [ -z "$(pidof olsrd)" ] ; then
		logger -t auto_ipv6_node "Restarting olsrd..."
		/etc/init.d/olsrd restart
	fi
fi
