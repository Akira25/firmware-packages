#!/bin/sh

. /etc/functions.sh

# IFUP?
[ "$ACTION" = "ifup" ] || exit 0

#Enable/Disable auto-ipv6
if ! [ "$(uci get autoipv6.tunnel.enable)" == 1 ] ; then
        logger -t auto-ipv6 "If you have a Internet uplink then uci set  autoipv6.tunnel.enable=1"
        exit 0
fi

#Kernel Tunnel Modul?
if [ "a""$(lsmod | grep '^sit ')" == "a" ] ; then
        logger -t auto-ipv6 "Please install kmod-sit and kmod-iptunnel4"
        exit 0
fi
#IPutils?
if ! ip 2>&1 | grep -q tunnel ; then
        logger -t auto-ipv6 "Please install ip with tunnel support"
        exit 0
fi


#Internet Gateway?
local IP4_GW
IP4_GW="$(uci -p /var/state get network.$INTERFACE.gateway)"
if [ "$IP4_GW" == "" ] ; then
	logger -t auto-ipv6 "No Gateway found on $INTERFACE"
	exit 0
fi

local IP4_LOCAL="$(uci -p /var/state get network.$INTERFACE.ipaddr)"
if [ "$IP4_LOCAL" == "" ] ; then
	logger -t auto-ipv6 "No Local IPv4 found"
	exit 0
fi



olsrd_find_hna6() {
	local cfg="$1"
	local netaddr="$2"
	config_get Netaddr $cfg netaddr
	if [ "$Netaddr" == "$netaddr" ] ; then
		neta="$count $neta"
	fi
	count=$((count+1))
	return 0
}

olsrd_search_hna6() {
	local cfg="$1"
	local found="0"
	config_get Netaddr $cfg netaddr
	for i in $hna6s ; do
		if [ "$Netaddr" == "$i" ] ; then
			found="1"
		fi
	done
	if [ "$found" == "0" ] ; then
		neta="$count $neta"
	fi
	count=$((count+1))
	return 0
}

net_find_iface() {
        local cfg="$1"
        if [ "$cfg" == "$INTERFACE" ] ; then
        	return 0
        fi
        case $cfg in
        	loopback) return 0 ;;
        	gvpn) return 0 ;;
        esac
        interfaces="$interfaces ""$cfg"
        return 0
}
olsrd_find_plugin(){
	local cfg="$1"
	local plugin="$2"
	config_get library "$cfg" library
	case $library in
		$plugin*)
			plugin_find="1"
			return 0
		;;
	esac
	plugin_count=$((plugin_count+1))
	return 0
}

find_public_ip(){
	local ret
	[ -z $ret ] && ret="$(wget -q -O - ifconfig.me/ip)"
	[ -z $ret ] && ret="$(wget -q -O - ipv4.icanhazip.com)"
	[ -z $ret ] && ret="$(wget -q -O - http://checkip.dyndns.org/index.html | awk {'print $6'} | sed 's/<.*$//')"
	echo "$ret"
}
local IP4_LOCAL_IF="$IP4_LOCAL"
case $IP4_LOCAL in
	1.*) IP4_LOCAL="$(find_public_ip)" ;;
	10.*) IP4_LOCAL="$(find_public_ip)" ;;
	192.168.*) IP4_LOCAL="$(find_public_ip)" ;;
	172.17.*) IP4_LOCAL="$(find_public_ip)" ;;
esac

if [ "$IP4_LOCAL" == "" ] ; then
	logger -t auto-ipv6 "No Local Public IPv4 found"
	exit 0
fi

# change umask of /var/state files for httpd 
umask 022

IP6_SUFFIX=$(printf "2002:%02x%02x:%02x%02x" $(echo $IP4_LOCAL|sed 's/\./ /g'))
logger -t auto-ipv6 "Applying IPv6 Sufix $IP6_SUFFIX"
ifconfig tun6to4 down 2&>1 1>/dev/null
ip tunnel del tun6to4 2&>1 1>/dev/null
ip tunnel add tun6to4 mode sit remote any local $IP4_LOCAL_IF ttl 64
ifconfig tun6to4 up
ifconfig tun6to4 "$IP6_SUFFIX""::1/16"
route -A inet6 add "::192.88.99.1" dev tun6to4
route -A inet6 add "2000::/3" gw "::192.88.99.1" dev tun6to4 metric 1
route -A inet6 add "::/0" gw "::192.88.99.1" dev tun6to4 metric 1

(
lock -w /var/run/auto-ipv6.lock && lock /var/run/auto-ipv6.lock
sleep 30
config_load network
interfaces=""
config_foreach net_find_iface interface
logger -t auto-ipv6 "found $interfaces"
local restart_dnsmasq=0
local restart_olsrd=0
local restart_crond=0
local hna6s="::"

[ -h /etc/dnsmasq.conf ] || ( rm -rf /etc/dnsmasq.conf ; ln -s /tmp/dnsmasq.conf /etc/dnsmasq.conf )
> /tmp/dnsmasq.conf
echo "enable-ra" >> /tmp/dnsmasq.conf
echo "dhcp-option=option6:dns-server,[::]" >> /tmp/dnsmasq.conf
echo "dhcp-option=option6:domain-search,olsr" >> /tmp/dnsmasq.conf
restart_dnsmasq=1

for i in $(echo $interfaces) ; do
	[ "$(uci get network.$i.proto)" == "static" ] || continue
	DEV="$(uci -q -p/var/state get network.$i.ifname)"
	[ -z "$DEV" ]  && {
		logger -t auto-ipv6 "uci Device Not Found IP6_SUFFIX $IP6_SUFFIX interfaces $i DEV $DEV check your uci config"
		continue
	}
	grep -q $DEV /proc/net/dev || {
		logger -t auto-ipv6 "Device Not Found IP6_SUFFIX $IP6_SUFFIX interfaces $i DEV $DEV check your uci config"
		continue
	}
	IP6_UCI=$(uci get network.$i.ip6addr)
	if [ $(echo $IP6_UCI | grep -i fdca) ] ; then
		uci set network.$i.ip6addr_fdca="$IP6_UCI"
	fi
	IP6_OLDSUFFIX="$(echo $IP6_UCI | cut -d ':' -f -3)"
	IP6_OLDUNIQ="$(echo $IP6_UCI | cut -d ':' -f 4)"
	if [ "$IP6_SUFFIX" == "$IP6_OLDSUFFIX" ] ; then
		if ifconfig "$DEV" | grep -q -e "$IP6_SUFFIX"".*1\/64" > /dev/null ; then
			hna6s="$IP6_OLDSUFFIX:$IP6_OLDUNIQ::"" $hna6s"
			echo "dhcp-range=$DEV,$IP6_OLDSUFFIX:$IP6_OLDUNIQ::100,$IP6_OLDSUFFIX:$IP6_OLDUNIQ::200,64,120s" >> /tmp/dnsmasq.conf
			echo "dhcp-range=$DEV,$IP6_OLDSUFFIX:$IP6_OLDUNIQ::,ra-only,64,120s" >> /tmp/dnsmasq.conf
			restart_dnsmasq=1
			logger -t auto-ipv6 "Found IP6_SUFFIX $IP6_OLDSUFFIX on interfaces $i DEV $DEV no update"
			continue
		fi
	fi

	#Uniq 4Bybte from urandom
	IP6_UNIQ="$(head -n 1 /dev/urandom 2>/dev/null | md5sum | cut -b 1-4)"
	case $IP6_UNIQ in 
		000*) IP6_UNIQ=$(echo $IP6_UNIQ | cut -b 4) ;; 
		00*) IP6_UNIQ=$(echo $IP6_UNIQ | cut -b 3-4) ;; 
		0*) IP6_UNIQ=$(echo $IP6_UNIQ | cut -b 2-4) ;;
	esac
	IP6_ADDRESS="${IP6_SUFFIX}:${IP6_UNIQ}::1/64"

	local ifconfig_add=1
	for j in $(ifconfig $DEV | grep Scope:Global | cut -d ' ' -f 13 ) ; do
		if ! [ $j == $IP6_ADDRESS ] ; then
			ifconfig "$DEV" del "$j"
		fi
	done

	if [ $ifconfig_add -eq 1 ] ; then
		ifconfig "$DEV" add "$IP6_ADDRESS"
		logger -t auto-ipv6 "ifconfig $DEV add $IP6_ADDRESS"
		uci -P /var/state set network.$i.ip6addr="$IP6_ADDRESS"
		uci set network.$i.ip6addr="$IP6_ADDRESS"
		uci commit network
		sysctl -w "net.ipv6.conf.$DEV.forwarding=1"
		sysctl -w "net.ipv6.conf.$DEV.autoconf=0"
		sysctl -w "net.ipv6.conf.$DEV.accept_ra=0"
		sysctl -w "net.ipv6.conf.$DEV.accept_ra_defrtr=0"
		sysctl -w "net.ipv6.conf.$DEV.accept_ra_pinfo=0"
	fi

	hna6s="$IP6_SUFFIX"":""$IP6_UNIQ""::"" $hna6s"

	echo "dhcp-range=$DEV,$IP6_SUFFIX:$IP6_UNIQ::100,$IP6_SUFFIX:$IP6_UNIQ::200,64,120s" >> /tmp/dnsmasq.conf
	echo "dhcp-range=$DEV,$IP6_SUFFIX:$IP6_UNIQ::100,$IP6_SUFFIX:$IP6_UNIQ::200,ra-only,64,120s" >> /tmp/dnsmasq.conf
	restart_dnsmasq=1

done

if [ "6and4" == "$(uci get olsrd.@olsrd[0].IpVersion)" ] ; then
	config_load olsrd
	for i in $hna6s ; do
		local neta=""
		local count=0
		local prefix=64
		if [ "$i" == "::" ] ; then
			prefix=0
		fi
		config_foreach olsrd_find_hna6 Hna6 $i
		if [ "$neta" == "" ] ; then
			uci add olsrd Hna6
			uci set "olsrd.@Hna6[-1].prefix=""$prefix"
			uci set "olsrd.@Hna6[-1].netaddr=""$i"
			uci commit olsrd
			restart_olsrd=1
		fi
	done

	local neta=""
	local count=0
	config_foreach olsrd_search_hna6 Hna6
	for i in $neta ; do
		uci delete "olsrd.@Hna6["$i"]"
		uci commit olsrd
		restart_olsrd=1
	done
fi


grep -q ping6 /etc/crontabs/root || {
	echo '* * * * *       ping6 -w 59 ipv6.google.com 1>/dev/null &' >> /etc/crontabs/root
	echo '* * * * *       ping6 -w 59 six.heise.de 1>/dev/null &' >> /etc/crontabs/root
	restart_crond=1
	}

# clear all config variables here. else they will leak into the olsrd init script
config_clear

if [ $restart_dnsmasq -eq 1 ] ; then
	if ! [ -z "$(pidof dnsmasq)" ] ; then
		#BUG
		#See dnsmasq 2.61 no periodic RA's
		#http://permalink.gmane.org/gmane.network.dns.dnsmasq.general/5753
		grep -q ALRM /etc/crontabs/root || {
			logger -t auto-ipv6 "Add dnsmasq to crontab"
			echo '* * * * *       killall -ALRM dnsmasq' >> /etc/crontabs/root
			restart_crond=1
		}
		logger -t auto-ipv6 "Restarting dnsmasq..."
		/etc/init.d/dnsmasq restart
	fi
fi
if [ $restart_crond -eq 1 ] ; then
	if ! [ -z "$(pidof crond)" ] ; then
		/etc/init.d/cron stop
		killall -9 crond
		/etc/init.d/cron start
	fi
fi
if [ $restart_olsrd -eq 1 ] ; then
	if ! [ -z "$(pidof olsrd)" ] ; then
		logger -t auto-ipv6 "Restarting olsrd..."
		#FIXME if restart via cron olsrd is not listen on :::2006
		(
			/etc/init.d/olsrd restart
			sleep 1
			/etc/init.d/olsrd restart
		) &
		#FIXME
	fi
fi
lock -u /var/run/auto-ipv6.lock
) &

